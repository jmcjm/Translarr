@page "/stats"
@inject StatsApiService StatsService
@inject ISnackbar Snackbar

<PageTitle>Statistics - Translarr</PageTitle>

<MudText Typo="Typo.h4" Class="mb-4">Statistics</MudText>

<MudGrid>
    <MudItem xs="12" md="6">
        <MudCard Elevation="2">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">Library Overview</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                @if (_libraryStats != null)
                {
                    <MudStack Spacing="2">
                        <MudStack Row="true" Justify="Justify.SpaceBetween">
                            <MudText>Total Files:</MudText>
                            <MudText Typo="Typo.h6">@_libraryStats.TotalFiles</MudText>
                        </MudStack>
                        <MudDivider />
                        
                        <MudStack Row="true" Justify="Justify.SpaceBetween">
                            <MudText Color="Color.Success">Processed:</MudText>
                            <MudText Typo="Typo.h6" Color="Color.Success">@_libraryStats.ProcessedFiles</MudText>
                        </MudStack>
                        <MudProgressLinear Value="@GetPercentage(_libraryStats.ProcessedFiles, _libraryStats.TotalFiles)" 
                                          Color="Color.Success" 
                                          Size="Size.Small" />
                        
                        <MudStack Row="true" Justify="Justify.SpaceBetween">
                            <MudText Color="Color.Warning">Waiting to Process:</MudText>
                            <MudText Typo="Typo.h6" Color="Color.Warning">@_libraryStats.WantedFiles</MudText>
                        </MudStack>
                        <MudProgressLinear Value="@GetPercentage(_libraryStats.WantedFiles, _libraryStats.TotalFiles)" 
                                          Color="Color.Warning" 
                                          Size="Size.Small" />
                        
                        <MudStack Row="true" Justify="Justify.SpaceBetween">
                            <MudText>Unprocessed:</MudText>
                            <MudText Typo="Typo.h6">@_libraryStats.UnprocessedFiles</MudText>
                        </MudStack>
                        <MudProgressLinear Value="@GetPercentage(_libraryStats.UnprocessedFiles, _libraryStats.TotalFiles)" 
                                          Color="Color.Default" 
                                          Size="Size.Small" />
                        
                        <MudStack Row="true" Justify="Justify.SpaceBetween">
                            <MudText Color="Color.Info">Already Has Subtitles:</MudText>
                            <MudText Typo="Typo.h6" Color="Color.Info">@_libraryStats.AlreadyHasFiles</MudText>
                        </MudStack>
                        <MudProgressLinear Value="@GetPercentage(_libraryStats.AlreadyHasFiles, _libraryStats.TotalFiles)" 
                                          Color="Color.Info" 
                                          Size="Size.Small" />
                        
                        <MudStack Row="true" Justify="Justify.SpaceBetween">
                            <MudText Color="Color.Error">Errors:</MudText>
                            <MudText Typo="Typo.h6" Color="Color.Error">@_libraryStats.ErrorFiles</MudText>
                        </MudStack>
                        <MudProgressLinear Value="@GetPercentage(_libraryStats.ErrorFiles, _libraryStats.TotalFiles)" 
                                          Color="Color.Error" 
                                          Size="Size.Small" />
                        
                        @if (_libraryStats.LastScanned.HasValue)
                        {
                            <MudDivider Class="mt-3" />
                            <MudText Typo="Typo.caption" Color="Color.Secondary">
                                Last scanned: @_libraryStats.LastScanned.Value.ToLocalTime().ToString("yyyy-MM-dd HH:mm:ss")
                            </MudText>
                        }
                    </MudStack>
                }
                else if (_isLoading)
                {
                    <MudProgressCircular Indeterminate="true" />
                }
            </MudCardContent>
        </MudCard>
    </MudItem>

    <MudItem xs="12" md="6">
        <MudCard Elevation="2">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">API Usage</MudText>
                </CardHeaderContent>
                <CardHeaderActions>
                    <MudIconButton Icon="@Icons.Material.Filled.Refresh" 
                                   Color="Color.Default" 
                                   OnClick="RefreshApiUsage" />
                </CardHeaderActions>
            </MudCardHeader>
            <MudCardContent>
                <MudStack Spacing="3">
                    <MudSelect @bind-Value="_selectedPeriod" 
                               Label="Time Period" 
                               Variant="Variant.Outlined"
                               T="string">
                        <MudSelectItem Value="@("7days")">Last 7 Days</MudSelectItem>
                        <MudSelectItem Value="@("30days")">Last 30 Days</MudSelectItem>
                        <MudSelectItem Value="@("90days")">Last 90 Days</MudSelectItem>
                    </MudSelect>

                    @if (_apiUsage != null && _apiUsage.Any())
                    {
                        <MudStack Spacing="2">
                            <MudText Typo="Typo.body1">
                                <strong>Total API Calls:</strong> @_apiUsage.Count
                            </MudText>
                            
                            <MudText Typo="Typo.body2" Color="Color.Secondary">
                                Recent Activity:
                            </MudText>
                            
                            <MudSimpleTable Dense="true" Hover="true" Style="max-height: 300px; overflow-y: auto;">
                                <thead>
                                    <tr>
                                        <th>Date</th>
                                        <th>Model</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var usage in _apiUsage.OrderByDescending(u => u.Date).Take(10))
                                    {
                                        <tr>
                                            <td>@usage.Date.ToLocalTime().ToString("yyyy-MM-dd HH:mm")</td>
                                            <td>@usage.Model</td>
                                        </tr>
                                    }
                                </tbody>
                            </MudSimpleTable>

                            @if (_apiUsage.Count > 10)
                            {
                                <MudText Typo="Typo.caption" Color="Color.Secondary">
                                    Showing 10 most recent of @_apiUsage.Count total calls
                                </MudText>
                            }
                        </MudStack>
                    }
                    else if (_isLoadingApi)
                    {
                        <MudProgressCircular Indeterminate="true" />
                    }
                    else
                    {
                        <MudAlert Severity="Severity.Info">
                            No API usage data available for the selected period.
                        </MudAlert>
                    }
                </MudStack>
            </MudCardContent>
        </MudCard>
    </MudItem>

    <MudItem xs="12">
        <MudCard Elevation="2">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">Processing Summary</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                @if (_libraryStats != null)
                {
                    <MudGrid>
                        <MudItem xs="12" sm="6" md="3">
                            <MudPaper Elevation="0" Class="pa-4 text-center">
                                <MudText Typo="Typo.h3" Color="Color.Primary">
                                    @GetProcessingPercentage()%
                                </MudText>
                                <MudText Typo="Typo.body2" Color="Color.Secondary">
                                    Processing Completion
                                </MudText>
                            </MudPaper>
                        </MudItem>
                        <MudItem xs="12" sm="6" md="3">
                            <MudPaper Elevation="0" Class="pa-4 text-center">
                                <MudText Typo="Typo.h3" Color="Color.Success">
                                    @_libraryStats.ProcessedFiles
                                </MudText>
                                <MudText Typo="Typo.body2" Color="Color.Secondary">
                                    Successfully Processed
                                </MudText>
                            </MudPaper>
                        </MudItem>
                        <MudItem xs="12" sm="6" md="3">
                            <MudPaper Elevation="0" Class="pa-4 text-center">
                                <MudText Typo="Typo.h3" Color="Color.Warning">
                                    @_libraryStats.WantedFiles
                                </MudText>
                                <MudText Typo="Typo.body2" Color="Color.Secondary">
                                    In Queue
                                </MudText>
                            </MudPaper>
                        </MudItem>
                        <MudItem xs="12" sm="6" md="3">
                            <MudPaper Elevation="0" Class="pa-4 text-center">
                                <MudText Typo="Typo.h3" Color="Color.Error">
                                    @_libraryStats.ErrorFiles
                                </MudText>
                                <MudText Typo="Typo.body2" Color="Color.Secondary">
                                    Failed
                                </MudText>
                            </MudPaper>
                        </MudItem>
                    </MudGrid>
                }
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>

@code {
    private LibraryStats? _libraryStats;
    private List<ApiUsageDto>? _apiUsage;
    private bool _isLoading = true;
    private bool _isLoadingApi = true;
    private string _selectedPeriod = "30days";

    protected override async Task OnInitializedAsync()
    {
        await LoadStats();
        await LoadApiUsage();
    }

    private async Task LoadStats()
    {
        try
        {
            _isLoading = true;
            _libraryStats = await StatsService.GetLibraryStatsAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading library stats: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task LoadApiUsage()
    {
        try
        {
            _isLoadingApi = true;
            
            var days = _selectedPeriod switch
            {
                "7days" => 7,
                "90days" => 90,
                _ => 30
            };
            
            var from = DateTime.UtcNow.AddDays(-days);
            _apiUsage = await StatsService.GetApiUsageStatsAsync(from);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading API usage: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isLoadingApi = false;
        }
    }

    private async Task RefreshApiUsage()
    {
        await LoadApiUsage();
    }

    private double GetPercentage(int value, int total)
    {
        if (total == 0) return 0;
        return (double)value / total * 100;
    }

    private int GetProcessingPercentage()
    {
        if (_libraryStats == null || _libraryStats.TotalFiles == 0) return 0;
        return (int)((double)_libraryStats.ProcessedFiles / _libraryStats.TotalFiles * 100);
    }
}

