@page "/"
@inject StatsApiService StatsService
@inject LibraryApiService LibraryService
@inject TranslationApiService TranslationService
@inject ISnackbar Snackbar

<PageTitle>Dashboard - Translarr</PageTitle>

<MudText Typo="Typo.h4" Class="mb-4">Dashboard</MudText>

@if (_isLoading)
{
    <MudProgressLinear Indeterminate="true" Color="Color.Primary" Class="mb-4" />
}

@if (_stats != null)
{
    <MudGrid>
        <MudItem xs="12" sm="6" md="3">
            <MudCard Elevation="2">
                <MudCardContent>
                    <MudText Typo="Typo.h3">@_stats.TotalFiles</MudText>
                    <MudText Typo="Typo.body2" Color="Color.Secondary">Total Files</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <MudItem xs="12" sm="6" md="3">
            <MudCard Elevation="2">
                <MudCardContent>
                    <MudText Typo="Typo.h3" Color="Color.Success">@_stats.ProcessedFiles</MudText>
                    <MudText Typo="Typo.body2" Color="Color.Secondary">Processed</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <MudItem xs="12" sm="6" md="3">
            <MudCard Elevation="2">
                <MudCardContent>
                    <MudText Typo="Typo.h3" Color="Color.Warning">@_stats.WantedFiles</MudText>
                    <MudText Typo="Typo.body2" Color="Color.Secondary">Waiting to Process</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <MudItem xs="12" sm="6" md="3">
            <MudCard Elevation="2">
                <MudCardContent>
                    <MudText Typo="Typo.h3" Color="Color.Error">@_stats.ErrorFiles</MudText>
                    <MudText Typo="Typo.body2" Color="Color.Secondary">Errors</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <MudItem xs="12">
            <MudCard Elevation="2">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Actions</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudStack Row="true" Spacing="3">
                        <MudButton Variant="Variant.Filled" 
                                   Color="Color.Primary" 
                                   StartIcon="@Icons.Material.Filled.Scanner"
                                   OnClick="ScanLibrary"
                                   Disabled="_isScanning">
                            @if (_isScanning)
                            {
                                <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="mr-2"/>
                            }
                            Scan Library
                        </MudButton>

                        <MudButton Variant="Variant.Filled" 
                                   Color="Color.Secondary" 
                                   StartIcon="@Icons.Material.Filled.Translate"
                                   OnClick="StartTranslation"
                                   Disabled="_isTranslating || _stats.WantedFiles == 0">
                            @if (_isTranslating)
                            {
                                <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="mr-2"/>
                            }
                            Start Translation
                        </MudButton>
                    </MudStack>
                </MudCardContent>
            </MudCard>
        </MudItem>

        @if (_translationStatus != null && _translationStatus.IsRunning)
        {
            <MudItem xs="12">
                <MudCard Elevation="2">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Translation Progress</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudText>@_translationStatus.Progress</MudText>
                        <MudProgressLinear Indeterminate="true" Color="Color.Primary" Class="mt-2"/>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        }

        @if (_stats.LastScanned.HasValue)
        {
            <MudItem xs="12">
                <MudAlert Severity="Severity.Info">
                    Last scan: @_stats.LastScanned.Value.ToLocalTime().ToString("yyyy-MM-dd HH:mm:ss")
                </MudAlert>
            </MudItem>
        }
    </MudGrid>
}

@code {
    private LibraryStats? _stats;
    private TranslationStatus? _translationStatus;
    private bool _isLoading = true;
    private bool _isScanning = false;
    private bool _isTranslating = false;
    private System.Threading.Timer? _statusTimer;

    protected override async Task OnInitializedAsync()
    {
        await LoadStats();
        await CheckTranslationStatus();
        
        // Start polling for translation status
        _statusTimer = new System.Threading.Timer(async _ =>
        {
            await InvokeAsync(async () => await CheckTranslationStatus());
        }, null, TimeSpan.Zero, TimeSpan.FromSeconds(3));
    }

    private async Task LoadStats()
    {
        try
        {
            _isLoading = true;
            _stats = await StatsService.GetLibraryStatsAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading stats: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task ScanLibrary()
    {
        try
        {
            _isScanning = true;
            var result = await LibraryService.ScanLibraryAsync();
            
            if (result != null)
            {
                Snackbar.Add($"Scan completed: {result.NewFiles} new, {result.UpdatedFiles} updated, {result.RemovedFiles} removed", 
                    Severity.Success);
                await LoadStats();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error scanning library: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isScanning = false;
        }
    }

    private async Task StartTranslation()
    {
        try
        {
            _isTranslating = true;
            var success = await TranslationService.StartTranslationAsync(100);
            
            if (success)
            {
                Snackbar.Add("Translation started", Severity.Info);
            }
            else
            {
                Snackbar.Add("Failed to start translation", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error starting translation: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isTranslating = false;
        }
    }

    private async Task CheckTranslationStatus()
    {
        try
        {
            _translationStatus = await TranslationService.GetTranslationStatusAsync();
            
            if (_translationStatus?.IsRunning == false && _translationStatus.Result != null)
            {
                // Translation just finished
                await LoadStats();
            }
            
            StateHasChanged();
        }
        catch
        {
            // Ignore errors during polling
        }
    }

    public void Dispose()
    {
        _statusTimer?.Dispose();
    }
}

